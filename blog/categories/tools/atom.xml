<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | 研究研究]]></title>
  <link href="http://www.yanjiuyanjiu.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://www.yanjiuyanjiu.com/"/>
  <updated>2013-04-03T23:50:48+08:00</updated>
  <id>http://www.yanjiuyanjiu.com/</id>
  <author>
    <name><![CDATA[soulmachine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的Octopress配置]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130402/"/>
    <updated>2013-04-02T15:35:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/my-octopress-configuration</id>
    <content type="html"><![CDATA[<h2>实时预览</h2>

<p>使用如下命令可以实现实时预览：
<code>bash
rake preview  
</code></p>

<p><code>rake preview</code> 会自动监视文件的变化，重新生成静态页面。因此修改markdown文件后，只需要在浏览器里刷新一下页面，就立刻可以看到效果。不过如果修改了_config.yml的话，则需要Ctrl+C终止，用<code>rake generate</code>重新生成，才能看到效果。</p>

<h2>嵌入代码块</h2>

<p>见官方文档<a href="http://octopress.org/docs/blogging/code/">Sharing Code Snippets</a>。</p>

<p>Octopress是一款为hacker量身定制的博客系统，当然内置了代码高亮的功能！它的代码高亮功能是通过Pygments实现的，配色方案用的是Solarized，堪称完美。</p>

<p>Octopress支持多种方式嵌入代码，可以直接嵌入代码，也可以引用github上的gist 。</p>

<p>我喜欢用<strong>三个反引号</strong>直接嵌入代码，比 <code>codeblock</code>要简洁。</p>

<h3>MathJax</h3>

<p>在<code>source/_includes/custom/footer.html</code>的第一行加入如下代码：
```</p>

<!-- mathjax config similar to math.stackexchange -->


<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  jax: ["input/TeX", "output/HTML-CSS"],
  tex2jax: {
    inlineMath: [ ['$', '$'] ],
    displayMath: [ ['$$', '$$']],
    processEscapes: true,
    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
  },
  messageStyle: "none",
  "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] }
});
</script>


<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"></script>


<p>```
这样就引入了MathJax的JS包，可以直接在markdown文件里直接写公式了，例如 $\dfrac {\pi}{2}$。</p>

<p>上面的代码也可以在head.html里添加，不过这样会使得页面的加载速度变慢。</p>

<!--more-->


<p>本节参考了<a href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/">Writing Math Equations on Octopress</a>，不过省去了安装kramdown的步骤，因为引入了MathJax的JS后，就可以直接写公式了，可以看看<a href="https://github.com/echen/echen.github.com/blob/source/_config.yml">edchen博客的_config.yml</a>，依然用的rdiscount，再看看它的网页源码，引用了MathJax的JS。</p>

<p><strong>右击公式全屏空白</strong>：这时候右击公式，全屏空白。解决这个问题很简单，参考<a href="http://jasonllinux.github.com/blog/2012/11/06/write-latex-in-octopress/">在Octopress中使用Latex公式</a>，只需在 <code>sass/base/_theme.scss</code>添加"#main"即可：
```
body {</p>

<blockquote><p>div#main {</p>

<pre><code>background: $sidebar-bg $noise-bg;
</code></pre>

<p>```</p></blockquote>

<h2>首页只显示部分正文(Excerpts)</h2>

<p>Octopress中，可以使用 <code>&lt;!--more--&gt;</code>，这样首页只显示一部分正文，并在每篇文章底下加一个Read on超链接。</p>

<h2>插入图片</h2>

<p>使用<a href="http://octopress.org/docs/plugins/image-tag/">Image Tag</a>。</p>

<p>语法
<code>
<img class="[class names]" src="/path/to/image" title="[width] [height] [title text [alt text]]" >
</code></p>

<p>例子
<code>
<img src="http://placekitten.com/890/280">
<img class="left" src="http://placekitten.com/320/250" title="Place Kitten #2" >
<img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #3" >
<img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #4" alt="An image of a very cute kitten">
</code></p>

<h2>添加about me 边栏</h2>

<p>编辑 source_includes\custom\asides\about.html，内容如下：
```
<section>
  <h1>About Me</h1>
  <p>一句话自我介绍.</p>
  <p>新浪微博: <a href="http://weibo.com/soulmachine">@soulmachine</a><br/></p>

<pre><code> Twitter: &lt;a href="https://twitter.com/#!/soulmachine"&gt;@soulmachine&lt;/a&gt;&lt;br/&gt;
 Other: &lt;a href="https://github.com/soulmachine"&gt;Github&lt;/a&gt;, &lt;a href="https://plus.google.com/103519507226474510310"&gt;Google+&lt;/a&gt;, &lt;a href="http://www.linkedin.com/in/soulmachine"&gt;LinkedIn&lt;/a&gt;, &lt;a href="http://www.quora.com/Jason-Day-2"&gt;Quora&lt;/a&gt;&lt;/p&gt;
</code></pre>

<p>  </p>
</section>
```
在 _config.yml 的 default_asides 里添加 custom/asides/about.html。</p>

<h2>添加about页面</h2>

<p><code>
rake new_page[about]
</code>
会生成 source/about/index.markdown 文件。</p>

<p>编辑该文件的内容。</p>

<p>然后在头部导航菜单中添加页面的超链接。具体做法是编辑 /source/_includes/custom/navigation.html 文件。</p>

<h2>社会化分享</h2>

<p>启用 twitter 分享， facebook like 和Google +1，设置如下：
<code>
google_plus_one: true
twitter_tweet_button: true
facebook_like: true
</code></p>

<p><strong>添加新浪微博分享</strong><br/>
参考这篇博客 <a href="http://programus.github.com/blog/2012/03/04/share-weibo-button/">为Octopress追加[分享到微博]按钮</a>。</p>

<p>在<code>source/_includes/post/sharing.html</code>中，加入代码：
```

  &lt;iframe</p>

<pre><code>allowTransparency="true"
frameborder="0"
scrolling="no"
width="72" 
height="16" 
src=
  "http://hits.sinajs.cn/A1/weiboshare.html?url=http://www.yanjiuyanjiu.comblog/categories/tools/atom.xml&amp;amp;type=3&amp;amp;count=1&amp;amp;language=zh_cn"&gt;
</code></pre>

<p>  </iframe>
  
```
同时要在_config.yml文件中加入weibo_share 字段，设置其值为true。</p>

<p>推荐使用jiathis.com 的分享按钮，集成了国内主流的网站，非常方便。获取JS代码后，替换掉上面代码即可。这时，可以在_config.yml 中，将twitter, google+ 和facebook like的按钮设置为false，取消显示，因为JiaThis已经集成了这三者，在本文底部可以看到效果。</p>

<h2>社会化评论</h2>

<p><del>启用Disqus，填入 short name即可。</del>Disqus在国外流行，在国内的加载速度太慢，而且只有twitter, facebook, g+，没有照顾到国内的用户习惯，因此替换成国内的<a href="www.duoshuo.com">多说</a>。参考这篇博客 <a href="http://ihavanna.org/Internet/2013-02/add-duoshuo-commemt-system-into-octopress.html">为 Octopress 添加多说评论系统</a>。不过配置略有不同：
<code>
duoshuo_comments: true
duoshuo_short_name: yanjiuyanjiu
duoshuo_asides_num: 5      # 侧边栏评论显示条目数
duoshuo_asides_avatars: 1   # 侧边栏评论是否显示头像
duoshuo_asides_time: 1      # 侧边栏评论是否显示时间
duoshuo_asides_title: 1     # 侧边栏评论是否显示标题
duoshuo_asides_admin: 0     # 侧边栏评论是否显示作者评论
duoshuo_asides_length: 32   # 侧边栏评论截取的长度
</code></p>

<h2>设置固定链接</h2>

<p>在 _config.yml 里，找到 permalink，设置如下：
<code>
permalink: /blog/:year:month:day/
</code>
效果就是<code>www.example.com/blog/20130403/</code>。模仿的是豆瓣的URL格式。</p>

<p>参考官方文档<a href="https://github.com/mojombo/jekyll/wiki/Permalinks">jekyll Permalinks</a>。</p>

<h2>侧边栏显示分类目录</h2>

<p>使用第三方插件 <a href="https://github.com/tokkonopapa/octopress-tagcloud">octopress-tagcloud</a>。</p>

<h2>友情链接</h2>

<p>在<code>source\_includes\custom\asides</code> 目录下添加一个blogroll.html文件，模仿about.html，添加一些友情链接，例如：
```
<section>
  <h1>友情链接</h1>
  <ul></p>

<pre><code>&lt;li&gt;
  &lt;a href="http://coolshell.cn/"&gt;酷壳CoolShell&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;a href="http://mindhacks.cn/"&gt;刘未鹏MIND HACKS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;a href="http://blog.codingnow.com/"&gt;云风&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
  &lt;a href="http://www.cnblogs.com/Solstice/"&gt;陈硕&lt;/a&gt;
&lt;/li&gt;
</code></pre>

<p>  </ul>
</section>
<code>``
然后在 \_config.yml 文件中，在 default_asides 的数组中添加</code>custom/asides/blogroll.html`。</p>

<h2>中文目录</h2>

<p>TODO</p>

<h2>修改字体</h2>

<p>Octopresss默认使用的是 google webfonts，见<code>source/_includes/custom/head.html</code>里的两行代码。Google Webfonts是个好东西，但遗憾的是它没有中文字体。所以你用<strong>粗体</strong>，发现并没有变粗，就是这个原因。</p>

<p>首先，将head.html中的两行代码注释掉，省去了加载字体，加快网页加载速度。
```</p>

<!--Fonts from Google"s Web font directory at http://google.com/webfonts -->


<!-- <link href="http://fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"> -->


<!-- <link href="http://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"> -->


<p><code>
参考 这篇博客 [最佳 Web 中文默认字体](http://lifesinger.wordpress.com/2011/04/06/best-web-default-fonts/)，在`sass/custom/_fonts.scss`中添加如下三行代码：
</code>
$heading-font-family: arial, sans-serif;
$header-title-font-family: arial, sans-serif;
$header-subtitle-font-family: arial, sans-serif;
```
刷新网页，可以看见中文的粗体变黑了。</p>

<h2>一些汉化工作</h2>

<p>在 _config.yml中，把 <code>Read on</code> 改为 "继续阅读"。
在 <code>source/_includes/custom/asides</code>目录下，将"Recent Comments"改为“最新评论”，"Categories"改为“分类目录”，将<code>source/_includes/asides/recent_posts.html</code>中"Recent Posts"改为“最新文章”。</p>

<h2>添加统计代码</h2>

<p>填入 Google Analytics Tracking ID，例如 <code>UA-7583537-4</code>。</p>

<h2>第三方主题和插件</h2>

<p>主题：<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">3rd Party Octopress Themes</a><br/>
插件：<a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">3rd party plugins</a></p>

<h2>参考资料</h2>

<ol>
<li><a href="http://shanewfx.github.com/blog/2012/08/13/improve-blog-theme/">Octopress主题改造</a></li>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用github + Octopress 搭建免费博客]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20130401/"/>
    <updated>2013-04-01T15:14:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/using-github-and-octoperss-to-create-a-free-blog</id>
    <content type="html"><![CDATA[<h3>前提条件</h3>

<p>注册一个github账号。</p>

<p>任何资料，都不如<a href="http://octopress.org/docs/">Octopress</a> 和<a href="https://help.github.com/categories/20/articles">Github Pages</a>的官方文档，建议首先阅读官方文档。</p>

<h3>GitHub Pages快速体验</h3>

<p>在GitHub网站上，点击右上角的+号图标，创建一个新的Repo，Repository 的名字必须为 username.github.com。然后点击Settings进入该Repo的设置页面。看到"Automatic Page Generator"，说明这个Repo已经启用了GitHub Page。点击按钮进入设置。</p>

<p>在"Create a GitHub User Page"填写一些基本信息，点击右下角的"Continue to Layout"。布局就用默认的，点击绿色的"Publish"按钮。</p>

<p>大功告成，输入"username.github.com"，看到一个页面没？这就是你刚刚创建的一个页面。</p>

<!--more-->


<p>GitHub Pages分为两种类型，一种是"User and Org Pages"，一种是"Project Pages"。前者是用户的主页，一个用户仅有一个。后者是每个项目的主页。见github page官方的文档 <a href="https://help.github.com/articles/user-organization-and-project-pages">Creating Pages with the automatic generator</a>。</p>

<p>本文创建的是第一种类型。</p>

<p>这篇博客 <a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html">搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门 - 阮一峰的网络日志</a>  很通俗易懂，不过它创建的是第二种类型，在一个Repo上新建了一个branch，并命名为gh-pages。</p>

<p>下面正式开始折腾。</p>

<h3>安装 msysgit并配置</h3>

<ul>
<li>下载<a href="http://msysgit.github.com/">msysgit</a>, 然后双击exe文件开始安装。</li>
<li>双击桌面图标Git Bash，启动一个shell，输入如下命令进行配置：</li>
</ul>


<p>产生公钥ssh key，默认全部回车<br/>
``` bash</p>

<pre><code>ssh-keygen -C github-account-email -t rsa
</code></pre>

<p>```</p>

<p>Note: username@email.com需要更换成你自己的在Github上注册的Email地址。
这样会在用户目录(C:\Documents and Settings\UserName)下产生一个.ssh文件夹，里面为对应的SSH Keys，其中id_rsa.pub是Github需要的SSH公钥文件。</p>

<p>在Github的Account Settings里选择SSH Keys，在其中将id_rsa.pub文件里内容拷贝至 其中的Key里。</p>

<p>这样以后就可以直接使用Git和GitHub了。</p>

<p>测试一下
<code>bash  
ssh -T git@github.com
</code></p>

<p>如果出现 hi xxx! You've successfully authenticated, bug GitHub does not povide shell access。说明SSH链接成功。</p>

<p>接下来配置其他信息。
``` bash</p>

<pre><code>git config --global user.name github-username  
git config --global user.email github-account-email  
git config --global github.user github-username  
git config --global credential.helper cache  
git config --global credential.helper 'cache --timeout=3600'
</code></pre>

<p>```
本节参考了 <a href="http://www.cnblogs.com/kysnail/archive/2012/03/16/2399589.html">msysGit 安装后的配置</a>。</p>

<h3>克隆Repo到本地</h3>

<p>在D盘新建一个文件夹，例如github。
<code>bash
cd d:\github  
git clone git@github.com:username/username.github.com.git
</code></p>

<h3>安装Octopress</h3>

<p>参考官方文档<a href="http://octopress.org/docs/setup/">setup</a>.<br/>
<strong>安装Ruby</strong><br/>
Octopress 2.0 需要 Ruby 1.9.3，安装其他版本的Ruby可能会行不通。</p>

<p>如果是Linux，使用RVM来安装Ruby，如果是Windows，则使用<a href="http://rubyinstaller.org/downloads/">RubyInstaller</a>。在这个<a href="http://rubyinstaller.org/downloads/">下载页面</a>下载Ruby 1.9.3-p392和DevKit(带mingw的版本)，双击exe文件进行安装。<br/>
<strong>安装DevKit</strong><br/>
双击DevKit的exe文件，解压到C:\DevKit
<code>bash  
cd C:\DevKit
ruby dk.rb init
ruby dk.rb install
gem install rdiscount --platform=ruby
</code></p>

<p><strong>安装Octopress</strong><br/>
下载Octopress。
<code>bash  
cd d:\github  
git clone git://github.com/imathis/octopress.git octopress  
cd octopress  
ruby --version  # Should report Ruby 1.9.3
rbenv rehash  # 可选，如果安装了rbenv，就需要执行这一步
</code></p>

<p><strong>注意</strong>: rubygems.org在中国的下载速度很慢，会导致bundle install这一步下载gems的速度很慢，可能需要等待几个小时。因此需要事先切换到国内的镜像源。</p>

<p>用记事本打开octopress目录下的Gemfile，将第一行修改为</p>

<blockquote><p>source "http://ruby.taobao.org"</p></blockquote>

<p>然后可以开始安装依赖的gems了。
<code>bash  
bundle install
</code><br/>
正常的话应该可以看到一行行的Installing xxx，表示正在安装所需要的gem。</p>

<p>安装默认的Octopress主题。
<code>bash  
rake install
</code><br/>
如果这一步出现问题，则试一下 bundle update再执行 rake install。</p>

<h3>部署到GitHub</h3>

<p>将Octopress和自己的Repo关联起来
<code>bash  
rake setup_github_pages
</code><br/>
编译生成JeKyll所需要的静态文件
<code>bash  
rake generate
</code><br/>
这个命令主要是根据source目录的内容，编译生成JeKyll所需要的静态文件，存放到public目录下。source 目录对应着git上的source分支。</p>

<p>预览
<code>bash  
rake preview
</code></p>

<p>部署到github
<code>bash  
rake deploy
</code><br/>
该命令首先清空_deploy目录，然后将public目录整个拷贝过来，然后commit到github。_deploy 目录对应着master分支。</p>

<p>备份source到github
<code>
git add .
git commit -m 'your message'
git push origin source
</code>
source 目录下保存了所有的markdown源文件，是博客的原始数据，以及一些模板文件。因此很有必要备份。用上述命令提交到github，这样就用git管理起来了，再也不用担心数据丢失了。</p>

<p><strong>终止预览</strong><br/>
启用<code>rake preview</code>后，直接按<code>ctrl+c</code>无法正常终止该进程，老提示<code>终止批处理操作吗（Y/N）？</code>，这时候可以另开一个Git Bash窗口，使用<code>ps aux | grep ruby</code>命令找出<code>pid(第一个数值)</code>，然后执行<code>kill &lt;pid&gt;</code>来停止该进程(参考<a href="http://linuxabc.heroku.com/blog/octopress-on-heroku-2">octopress on heroku (二)</a>)。<br/>
<strong>UTF-8 编码</strong><br/>
Windows预设是Big5编码,所以要想’rake generate’的时候不报编码错误,我们需要设置一下编码! 方法有两个,一个是直接在Git Bash中设置环境:
<code>bash  
set LANG=zh_CN.UTF-8  
set LC_ALL=zh_CN.UTF-8
</code><br/>
还有一个是在环境变量中加入这两个变量: 右击电脑->属性，新添加LANG和LC_ALL两个环境变量，值为为zh_CN.UTF-8.</p>

<p>然后在Git Bash中做如下设置:
<code>bash  
echo "export LANG LC_ALL" &gt; ~/.bash\_profile
</code></p>

<h3>绑定域名</h3>

<p>参考官方文档<a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Setting up a custom domain with Pages</a>。</p>

<p>非常简单，在master分支的根目录，添加一个文本文件，名字为CNAME，里面的内容就是要绑定的域名，例如本博客CNAME文件的内容是：</p>

<blockquote><p>www.yanjiuyanjiu.com</p></blockquote>

<p>然后去DNSPod，添加一条CNAME，指向 username.github.com。例如我的为：
<code>
www CNAME   默认  soulmachine.github.com.     -   600
</code></p>

<p>很多人喜欢去掉www，用xxx.com的形式来访问，不过大家去试一下，在浏览器输入qq.com, douban.com, baidu.com，发现都会自动跳转到www，也就是说这些大网站，目前也是用www.example.com的域名为主，因此建议大家也这样做。</p>

<p>用www, blog之类的二级域名，还有个好处是方便升级，比如新版本用www1指向，等测试完成后，改成www指向，无缝切换。</p>

<p>如何让example.com 自动变成www.example.com呢？需要用 301重定向，在DNSPod上非常简单，添加一条显性URL即可，例如我的是：
<code>
@   显性URL   默认  http://www.yanjiuyanjiu.com -   600
</code></p>

<p>在使用Octopress的时候，每次<code>rake generate</code>, <code>rake deploy</code>后，master分支下面的CNAME文件消失了。正确的做法是，把CNAME文件放到在 source 目录下，其余的都删掉，<code>rake generate</code> 会自动拷贝到public目录下，<code>rake deploy</code>再拷贝public目录内容到_deploy目录，并提交到master分支。</p>

<h3>参考资料</h3>

<ol>
<li><a href="http://corey600.github.com/blog/2013/02/28/use-github-and-octopress-create-blog/">【原创】用Github和Octopress搭建博客</a></li>
<li><a href="http://www.blogjava.net/lishunli/archive/2012/03/18/372115.html">试用Octopress</a></li>
<li><a href="http://rubyer.me/blog/134/">windows下安装DevKit</a></li>
<li><a href="http://blog.sprabbit.com/blog/2012/12/21/recover-octopress/">在新Windows系统中重新部署Octopress</a></li>
<li><a href="http://hivan.me/octopress-install-to-windows8/">Windows 8安装Octopress记录</a></li>
<li><a href="http://blog.sprabbit.com/blog/2012/03/23/octopress/">关于在64位 Windows 7 中部署中文化的Octopress</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用VisualVM连接 tomcat 服务器时，如何配置tomcat启动JMX]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20120811/"/>
    <updated>2012-08-11T21:37:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/configure-tomcat-jmx-to-allow-visualvm-connect-tomcat</id>
    <content type="html"><![CDATA[<p>用VisualVM连接 tomcat 服务器时，需要让tomcat启动JMX，在catalina.sh 中添加一行代码即可：
<code>bash
JAVA_OPTS=”$JAVA_OPTS -Djava.rmi.server.hostname=192.168.0.123 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=8086 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false
</code>
注意，用hostname -i 查看是否为127.0.01，这步非常重要,否则会连接失败，如果是，必须要配置-Djava.rmi.server.hostname。</p>

<p>参考： <br/>
<a href="http://blog.tty.nl/2010/09/03/using-visualvm-to-fix-live-tomcat-and-jvm-problems/">Using VisualVM to fix live Tomcat and JVM problems</a><br/>
<a href="http://blog.csdn.net/linghunhong/article/details/6438572">JVM内存监控:visualVM jconsole jstatd jmap</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS 服务器安装操作全记录]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20120423/"/>
    <updated>2012-04-23T20:43:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/install-and-configure-a-centos-server-from-scratch</id>
    <content type="html"><![CDATA[<p>这是我安装CentOS服务器的过程，记录下来，与大家一起分享。</p>

<h2>安装操作系统</h2>

<p>CentOS 6.2 ，CentOS-6.2-i386-bin-DVD1.iso（32位） ，CentOS-6.2-x86_64-bin-DVD1.iso（64位）</p>

<p>安装 CentOS时，选择 "Basic Server"<br/>
root密码：root123<br/>
CentOS 自带了ssh</p>

<p>安装完操作系统后，添加一个用户 dev
<code>bash
[root@localhost ~]$ useradd dev
</code>
然后密码设为 dev123
<code>bash
[root@localhost ~]$ passwd dev
</code>
给予 sudo 权限
``` bash
[root@localhost ~]$ chmod u+w /etc/sudoers
[root@localhost ~]$ vim /etc/sudoers</p>

<h1>在root ALL=(ALL) ALL 下 添加dev ALL=(ALL) ALL</h1>

<p>[root@localhost ~]$ chmod u-w /etc/sudoers
```</p>

<h2>设置上网</h2>

<p>安装完操作系统后，还不能上网，配置DHCP方式上网：
``` bash
vim /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE="eth0"
HWADDR="00:0C:29:BD:E1:19"
NM_CONTROLLED="yes"
ONBOOT="yes"
BOOTPROTO=dhcp
USECTL=no
TYPE=Ethernet
PEERDNS=yes</p>

<h1>保存退出</h1>

<p>sudo service network restart
```</p>

<!-- more -->


<p>或者，配置静态IP
``` bash
DEVICE="eth0"
HWADDR="00:0C:29:10:F4:4C"
ONBOOT="yes"
BOOTPROTO=static
TYPE=Ethernet
IPADDR=192.168.0.162
NETMASK=255.255.255.0
BROADCAST=192.168.0.255
NETWORK=192.168.0.0</p>

<h1>保存退出</h1>

<h1>修改/etc/sysconfig/network</h1>

<p>sudo vim /etc/sysconfig/network
NETWORKING=yes
HOSTNAME=localhost.localdomain
GATEWAY=192.168.0.1</p>

<h1>保存退出，重启网络</h1>

<p>sudo service network restart
```
如果失败，比如IP已被占用，换一个IP试试</p>

<p>修改DNS，即时生效
``` bash
sudo vim /etc/resolv.conf
nameserver 192.168.0.1</p>

<h1>google提供的域名服务器</h1>

<p>nameserver 8.8.8.8
search localhost
```</p>

<h2>安装常用软件</h2>

<p>有两种方式，方法一，去官网下载已经编译好的二进制文件，或源代码，编译安装
方法二，用yum 命令安装，安装官方yum源里已经编译好的程序包。<br/>
第一种方式要敲很多命令，比yum麻烦，但是可以预先下载好文件，省略了下载的时间，整体速度比yum安装方式快很多，而且可以安装最新版。推荐第一种方式</p>

<p>第二种方式操作简单，敲打的命令少，但是往往yum源的更新速度跟不上各个软件的官网速度，用Yum安装的版本经常比较旧。</p>

<p>yum的命令形式一般是如下：<code>yum [options] [command] [package ...]</code>，其中的[options]是可选的，选项包括-h（帮助），-y（当安装过程提示选择全部为"yes"），-q（不显示安装的过程）等等。[command]为所要进行的操作，[package ...]是操作的对象。
``` bash</p>

<h1>yum search package-name # 在线搜索包</h1>

<h1>yum list installed # 列出所有已经安装的包</h1>

<p>#</p>

<h1>sudo yum install package-name # 安装程序包</h1>

<h1>sudo yum groupinsall group-name 安装程序组</h1>

<p>#</p>

<h1>sudo yum remove package-name 删除程序包</h1>

<h1>sudo yum groupremove group-name 删除程序组</h1>

<p>#</p>

<h1>yum update #全部更新</h1>

<h1>yum update package-name #更新程序包</h1>

<h1>sudo yum groupupdate groupn-name 升级程序组</h1>

<h1>sudo yum upgrade # 更新源列表</h1>

<h1>yum upgrade package-name #升级程序包</h1>

<h1>sudo yum clean all # 清除缓存</h1>

<h1>更新</h1>

<p>sudo yum update</p>

<h1>清理缓存</h1>

<p>sudo yum clean all &amp;&amp; yum clean metadata &amp;&amp; yum clean dbcache
```</p>

<h2>安装编译工具</h2>

<h3>方法一</h3>

<p>去 http://gcc.gnu.org/ 下载源码
``` bash</p>

<h1>TODO</h1>

<p>```</p>

<h3>方法二</h3>

<p><code>bash
sudo yum groupinstall "Development Tools"
</code>
该命令类似于 Ubuntu 下的<code>apt-get install build-essential</code>，会自动安装一下软件包：autoconf automake bison byacc cscope ctags diffstat doxygen flex gcc gcc-c++ gcc-gfortran git indent intltool libtool patchutils rcs redhat-rpm-config rpm-build subversion swig systemtap，同时安装了以下依赖包：apr, apr-util, 等等。</p>

<h2>安装JDK</h2>

<p>``` bash</p>

<h1>删除旧的JDK</h1>

<p>yum list installed | grep jdk</p>

<h1>复制显示出来的JDK，卸载</h1>

<p>sudo yum remove java-1.6.0-openjdk.x86_64</p>

<h1>安装新的jdk</h1>

<p>```</p>

<h3>方法一</h3>

<p>``` bash</p>

<h1>从官网下载最新版的，当前是jdk6u32</h1>

<h1>开始安装</h1>

<p>chmod u+x chmod u+x jdk-6u32-linux-x64-rpm.bin
sudo ./jdk-6u32-linux-x64-rpm.bin</p>

<h1>设置环境变量，.bash_profile是当前用户，/etc/profile是所有用户的</h1>

<p>sudo vim /etc/profile</p>

<h1>在末尾添加</h1>

<p>export JAVA_HOME=/usr/java/default
export JRE_HOME=$JAVA_HOME/jre
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</p>

<h1>保存退出，输入以下命令使之立即生效：</h1>

<p>source /etc/profile</p>

<h1>测试</h1>

<p>java -version
```</p>

<h3>方法二</h3>

<p>``` bash
yum search jdk</p>

<h1>java-1.6.0-openjdk只包含了JRE，如果在这台机器上开发java程序，则需要安装JDK，</h1>

<h1>要选择 java-1.6.0-openjdk-devel，在服务器上我们只需要运行java程序，因此选择前者</h1>

<p>sudo yum install java-1.6.0-openjdk-devel</p>

<h1>使用 alternatives 工具设置默认JDK，参考：Installing a Java Development Kit on Red Hat Enterprise Linux</h1>

<p>/usr/sbin/alternatives --config java
/usr/sbin/alternatives --config javac</p>

<h1>设置环境变量</h1>

<h1>查询JDK路径</h1>

<p>whereis java
ll /usr/bin/java
ll /etc/alternatives/java #这是可以看到JDK路径了
sudo vim /etc/profile</p>

<h1>在末尾添加</h1>

<p>export JAVA_HOME=/usr/lib/jvm/jre-1.6.0-openjdk.x86_64
export JRE_HOME=$JAVA_HOME/jre
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</p>

<h1>保存退出，输入以下命令使之立即生效：</h1>

<h1>source /etc/profile</h1>

<h1>测试</h1>

<p>java -version
```</p>

<h2>安装 apache</h2>

<h3>方法一</h3>

<p>源码在官网 http://httpd.apache.org/ 下载。<br/>
先下载apt, apr-util, pcre三个库，httpd 在编译时需要用到这三个库<br/>
apr, apr-util官网 http://apr.apache.org , pcre官网为 <a href="http://pcre.org">http://pcre.org </a>
``` bash</p>

<h1>编译，安装 apr</h1>

<p>tar -jxf apr-1.4.6.tar.bz2
cd apr-1.4.6
./configure
make
sudo make install    # 默认会安装到 /usr/local/apr/
cd ~</p>

<h1>编译，安装 apr-util</h1>

<p>tar -jxf apr-util-1.4.1.tar.bz2
cd apr-util-1.4.1
./configure --with-apr=/usr/local/apr/
make
sudo make install    # 默认会安装到 /usr/local/apr/
cd ~</p>

<h1>编译，安装 pcre</h1>

<p>tar -jxf pcre-8.30.tar.bz2
cd  pcre-8.30
./configure --with-apr=/usr/local/apr/
make</p>

<h1>By default, `make install' installs the package's commands under</h1>

<h1><code>/usr/local/bin', include files under</code>/usr/local/include', etc.</h1>

<p>sudo make install
cd ~</p>

<h1>编译，安装 apache</h1>

<p>tar -jxf httpd-2.2.22.tar.bz2
cd httpd-2.2.22
./configure
make
sudo make install    # 默认会安装到/usr/local/apache2/
cd ~</p>

<h1>添加防火墙规则，让防火墙允许 apache的端口 80通过</h1>

<p>sudo vim /etc/sysconfig/iptables</p>

<h1>添加如下一行（实际上是拷贝了原来的一行，仅仅改变了端口号），位置必须#要放在 含有 "REJECT --reject-with" 的行的前面</h1>

<p>-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
sudo service iptables restart</p>

<h1>测试</h1>

<p>sudo /usr/local/apache2/bin/apachectl start</p>

<h1>在浏览器输入 http://ip地址 ，如果看到“It works”，说明安装成功</h1>

<p>/usr/local/apache2/bin/apachectl stop</p>

<h1>设置为开机启动</h1>

<h1>将httpd注册为服务，通过chkconfig实现开机启动</h1>

<h1>以apachectl 为模板</h1>

<p>sudo cp /usr/local/apache2/bin/apachectl /etc/init.d/httpd
sudo vim /etc/init.d/httpd</p>

<h1>在第一行 #!/bin/sh，添加如下一行，使其支持chkconfig命令</h1>

<h1>chkconfig: 2345 85 15</h1>

<h1>保存，退出VIM编辑器</h1>

<p>sudo chmod u+x /etc/init.d/httpd
sudo chkconfig --add httpd
sudo chkconfig httpd on</p>

<h1>检查一下，是否添加成功</h1>

<p>chkconfig --list httpd
```</p>

<h3>方法二</h3>

<p>``` bash
sudo yum install httpd</p>

<h1>可选？sudo yum install httpd-devel</h1>

<h1>测试</h1>

<h1>启动 apache http server</h1>

<p>sudo service httpd start</p>

<h1>添加规则，让防火墙允许 apache的端口 80</h1>

<p>sudo vim /etc/sysconfig/iptables</p>

<h1>添加如下一行，位置必须要放在 含有 "REJECT --reject-with" 的行的前面</h1>

<p>-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
sudo service iptables restart</p>

<h1>可以在浏览器输入 http://ip地址 测试了</h1>

<h1>设置为开机启动</h1>

<p>sudo chkconfig httpd on
```</p>

<h2>安装 mysql</h2>

<h3>方法一</h3>

<p>``` bash</p>

<h1>去官网下载 Oracle &amp; Red Hat 6的安装包，64位为MySQL-5.5.23-1.el6.x86_64.tar，</h1>

<h1>32位为 MySQL-5.5.23-1.el6.i686.tar</h1>

<p>tar -xf MySQL-5.5.23-1.el6.x86_64.tar</p>

<h1>加 --force 是因为可能会与mysqllib库冲突</h1>

<p>sudo rpm -ivh --force  MySQL-server-5.5.23-1.el6.x86_64.rpm
sudo rpm -ivh MySQL-client-5.5.23-1.el6.x86_64.rpm</p>

<h1>启动 mysql 服务器</h1>

<p>sudo service mysql start</p>

<h1>设置为开机启动</h1>

<p>sudo chkconfig mysql on
```</p>

<h3>方法二</h3>

<p>``` bash
sudo yum install mysql-server
sudo chgrp -R mysql /var/lib/mysql
sudo chmod -R 770 /var/lib/mysql</p>

<h1>启动 mysql 服务器</h1>

<p>sudo service mysqld start</p>

<h1>设置为开机启动</h1>

<p>sudo chkconfig mysqld on
```</p>

<h3>公共的操作</h3>

<p>``` bash</p>

<h1>root 初始密码为空，修改root密码</h1>

<p>mysql -u root
mysql> use mysql;
mysql> update user set password=password('root123') where user='root' AND host='localhost';
mysql> flush privileges;</p>

<h1>打开MySQL中root账户的远程登录，参考：如何打开MySQL中root账户的远程登录mysql> GRANT ALL PRIVILEGES ON <em>.</em> TO root@"%" IDENTIFIED BY "root";</h1>

<p>mysql> update user set password=password('root123') where user='root' AND host='%';
mysql> flush privileges;
mysql> quit;</p>

<h1>添加防火墙规则，让防火墙允许 mysql 的端口 3306通过</h1>

<p>sudo vim /etc/sysconfig/iptables</p>

<h1>添加如下一行（实际上是拷贝了原来的一行，仅仅改变了端口号），位置必须#要放在 含有 "REJECT --reject-with" 的行的前面</h1>

<p>-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT
sudo service iptables restart
```</p>

<h2>安装 php5</h2>

<h3>方法一</h3>

<p>TODO</p>

<h3>方法二</h3>

<p>``` bash
sudo yum install php php-pear</p>

<h1>重启 apache，以确保apache 加载PHP模块</h1>

<p>sudo service httpd restart</p>

<h1>在 /var/www/html/下新建一个index.php文件，用于测试</h1>

<p>cd /var/www/html
sudo vim index.php</p>

<h1>添加如下一行</h1>

<p>&lt;?php phpinfo(); ?></p>

<h1>在浏览器输入 http://xxx.xxx.xxx.xxx/index.php ，测试PHP是否成功安装</h1>

<h1>如果需要在PHP中支持mysql，则需要安装 php-mysql 模块</h1>

<p>sudo yum install php-mysql</p>

<h1>如果需要在PHP中支持memcached，则需要安装 php-pecl-memcache 模块</h1>

<p>sudo yum install php-pecl-memcache</p>

<h1>安装一些常用的PHP扩展模块</h1>

<p>sudo yum install php-devel php-gd php-mbstring php-xml</p>

<h1>可以安装一个wordpress进行测试，注意要修改文件夹权限</h1>

<p>sudo chown -R apache.apache /var/www/html
```</p>

<h2>安装 memcached</h2>

<h3>方法一</h3>

<p>``` bash</p>

<h1>memcached依赖libevent，首先要安装 libevent</h1>

<h1>去 http://libevent.org/ 下载libevent源码，然后编译，安装</h1>

<p>tar -zxf libevent-2.0.18-stable.tar.gz
cd libevent-2.0.18-stable
./configure
make
sudo make install</p>

<h1>对于64位操作系统(32位不需要)，还需要配置：</h1>

<p>sudo ln -s /usr/local/lib/libevent-2.0.so.5 /usr/lib64//libevent-2.0.so.5</p>

<h1>去 http://www.memcached.org/ 下载 memcached，然后编译，安装</h1>

<p>tar -zxf memcached-1.4.13.tar.gz
cd memcached-1.4.13
./configure
make
sudo make install</p>

<h1>启动, -p，端口,-m，内存, -u</h1>

<p>memcached -p 11211 -m 512m -u root -d</p>

<h1>开机启动</h1>

<h1>centos设置开机启动有两种方式，一是把启动程序的命令添加到/etc/rc.d/rc.local文件中，二是把写好的启动脚本添加到目录/etc/rc.d/init.d/，然后使用命令chkconfig设置开机启动。第二种方式可以用 service xxx start|stop来启动或停止，所以推荐第二种。</h1>

<h1>将 memcached启动命令注册为一个服务</h1>

<p>cd /etc/init.d/
sudo vim memcached</p>

<h1>代码如下，参考：Linux中将memcached注册成服务并可以随机器启动时启动服务</h1>

<h1>chkconfig: 345 60 60</h1>

<h1>!/bin/bash</h1>

<p>start()
{</p>

<pre><code>    echo -n $"Starting memcached: "
    /usr/local/bin/memcached -p 11211 -m 512m -u root -d
    echo "[OK]"
</code></pre>

<p>}
stop()
{</p>

<pre><code>    echo -n $"Shutting down memcached: "
    memcached_pid_list=`pidof memcached` 
    kill -9 $memcached_pid_list
    echo "[OK]"
</code></pre>

<p>}
case "$1" in
  start)</p>

<pre><code>    start
    ;;
</code></pre>

<p>  stop)</p>

<pre><code>    stop
    ;;
</code></pre>

<p>  restart)</p>

<pre><code>    stop
    sleep 3
    start
    ;;
*)
         echo $"Usage: $0 {start|stop|restart}"
    exit 1
</code></pre>

<p>esac
exit 0</p>

<h1>保存退出</h1>

<p>sudo chmod u+x memcached
sudo chkconfig --add memcached
sudo chkconfig  memcached on
```</p>

<h3>方法二</h3>

<p>TODO</p>

<h2>安装 tomcat6</h2>

<h3>方法一</h3>

<p>``` bash</p>

<h1>去 http://tomcat.apache.org 下载 apache-tomcat-6.0.35.tar.gz</h1>

<p>tar -zxf apache-tomcat-6.0.35.tar.gz
sudo mv apache-tomcat-6.0.35 /usr/local/
cd /usr/local/apache-tomcat-6.0.35/bin</p>

<h1>【可选】添加环境变量</h1>

<p>sudo vim /etc/profile
export CATALINA_HOME=/usr/local/apache-tomcat-6.0.35</p>

<h1>启动 tomcat</h1>

<p>sudo ./startup.sh</p>

<h1>在浏览器输入 http://xxx.xxx.xxx.xxx:8080/ ，如果能看见tomcat页面，则表示安装成功了</h1>

<h1>设置开机启动</h1>

<h1>将 tomcat启动命令注册为一个服务</h1>

<p>cd /etc/init.d/
sudo vim tomcatd</p>

<h1>代码如下</h1>

<h1>chkconfig: 345 60 60</h1>

<h1>!/bin/bash</h1>

<p>CATALINA_HOME=/usr/local/apache-tomcat-6.0.35</p>

<p>start()
{</p>

<pre><code>    echo -n $"Starting Tomcat: "
    $CATALINA_HOME/bin/startup.sh
    echo "[OK]"
</code></pre>

<p>}
stop()
{</p>

<pre><code>    echo -n $"Shutting down Tomcat: "
    $CATALINA_HOME/bin/shutdown.sh
    echo "[OK]"
</code></pre>

<p>}
case "$1" in
  start)</p>

<pre><code>    start
    ;;
</code></pre>

<p>  stop)</p>

<pre><code>    stop
    ;;
</code></pre>

<p>  restart)</p>

<pre><code>    stop
    sleep 3
    start
    ;;
*)
         echo $"Usage: $0 {start|stop|restart}"
    exit 1
</code></pre>

<p>esac
exit 0</p>

<h1>保存退出</h1>

<p>sudo chmod u+x tomcatd
sudo chkconfig --add tomcatd
sudo chkconfig tomcatd on</p>

<h1>添加防火墙规则，让防火墙允许 tomcat 的端口 8080 通过</h1>

<p>sudo vim /etc/sysconfig/iptables</p>

<h1>添加如下一行（实际上是拷贝了原来的一行，仅仅改变了端口号），位置必须#要放在 含有 "REJECT --reject-with" 的行的前面</h1>

<p>-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT
sudo service iptables restart
```</p>

<h3>方法二</h3>

<p>``` bash</p>

<h1>搜索一下 tomcat包的名字</h1>

<p>yum search tomcat
sudo yum search tomcat6.noarch
```</p>

<h2>安装Python</h2>

<h3>方法一：去<a href="http://www.python.org">官网</a>下载源码，编译，安装</h3>

<p>``` bash</p>

<h1>开始解压，编译，安装</h1>

<p>tar -jxf Python-3.2.3.tar.bz2
cd Python-3.2.3</p>

<h1>查看一下说明, vim README</h1>

<p>./configure
make</p>

<h1>为了加快安装速度，这步可以省略</h1>

<p>make test</p>

<h1>卸载旧的python，注意，不能用 yum remove python，这会卸载几百个包，最终损坏系统</h1>

<p>sudo rpm -evf --nodeps python
sudo make install</p>

<h1>默认安装在 /usr/local/bin/python3</h1>

<p>```</p>

<h3>方法二</h3>

<p><code>bash
sudo yum install python
</code></p>

<h2>安装ruby</h2>

<h3>方法一</h3>

<p>``` bash</p>

<h1>http://www.ruby-lang.org/en/downloads/ ，选择 "Stable Snapshot"</h1>

<p>tar -zxf ruby-1.9-stable.tar.gz
cd  cd ruby-1.9.3-p194/
./configure
make
sudo make install
```</p>

<h3>方法二</h3>

<p><code>bash
sudo yum install ruby
</code></p>

<h2>安装go</h2>

<p>``` bash</p>

<h1>去官网 http://code.google.com/p/go/downloads 下载，go1.0.1.linux-i386.tar.gz (32位)，go1.0.1.linux-amd64.tar.gz（64位）</h1>

<p>tar -zxf go1.0.1.linux-amd64.tar.gz
sudo mv go/ /usr/local/</p>

<h1>设置环境变量</h1>

<p>sudo vim /etc/profile
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
source /etc/profile</p>

<h1>测试一下</h1>

<p>go version
```</p>

<h2>安装lua</h2>

<p>``` bash</p>

<h1>去官网下载源码，编译，安装。由于官网仅提供源码，故推荐源码编译安装方式。</h1>

<h1>去官网 http://www.lua.org/ 下载源码，lua-5.2.0.tar.gz</h1>

<p>tar -zxf lua-5.2.0.tar.gz
cd lua-5.2.0</p>

<h1>lua 依赖 readline.h 头文件</h1>

<p>sudo yum install  readline-devel
make linux
sudo make install</p>

<h1>安装 google protobuf</h1>

<h1>去官网 http://code.google.com/p/protobuf/下载</h1>

<p>tar -jxf protobuf-2.4.1.tar.bz2
cd protobuf-2.4.1
./configure
make
sudo make install</p>

<h1>测试</h1>

<p>protoc
```</p>

<h2>清理安装包</h2>

<p><code>bash
cd ~
rm * -rf
</code></p>

<h2>参考资料</h2>

<p><a href="http://library.linode.com/lamp-guides/centos-6">LAMP Server on CentOS 6</a></p>

<p><a href="http://articles.slicehost.com/2008/2/6/centos-installing-apache-and-php5">CentOS - Installing Apache and PHP5</a></p>

<p><a href="http://fedorasolved.org/server-solutions/lamp-stack">Setting up a LAMP stack</a></p>

<p><a href="http://myohmy.blog.51cto.com/140917/327310">CentOS5.5使用yum来安装LAMP</a></p>

<p><a href="http://it.megocollector.com/?p=1719">Install Java JDK on CentOS without prompts using an automated script!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[制作 VMware ESXI 5 U盘安装盘]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20120418/"/>
    <updated>2012-04-18T20:17:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/create-a-bootable-vmware-esxi-5-usb-stick</id>
    <content type="html"><![CDATA[<p>有两种方法，使用 unetbootin ，或使用 LinuxLive USB Creator刻录可启动U盘。</p>

<h2>使用 unetbootin</h2>

<p>这个方法最自动化，点击两下按钮即可，但是有时候会失败(我用EXSi 5.0 的ISO失败，但是用 EXSi 5.0U1可以成功)，U盘启动不了。</p>

<ol>
<li>单击 光盘镜像，选择ISO文件VMware-VMvisor-Installer-5.0.0.update01-623860.x86_64.iso。</li>
<li>选择U盘，点击“确定”开始刻录。刻录后用U盘启动机器开始安装即可。如下图所示。
<img src="http://yanjiuyanjiu-wordpress.stor.sinaapp.com/uploads/2012/04/unetbootin1.jpg"></li>
</ol>


<h2>使用 LinuxLive USB Creator</h2>

<ol>
<li>格式化U盘，文件系统为FAT32，并设置为主分区，命令如下：

<pre><code> # 使用管理员权限运行cmd 
 diskpart 
 list disk 
 select disk USB number （例如 select dist 1） 
 clean 
 create partition primary 
 active 
 format fs=fat32 quick 
 assign 
 exit
</code></pre></li>
</ol>


<!-- more -->


<ol>
<li>下载，安装 LinuxLive USB Creator(<a href="http://www.linuxliveusb.com/">http://www.linuxliveusb.com/</a>)</li>
<li><p>按照上图中的步骤 1,2,4，选择ISO文件<code>VMware-VMvisor-Installer-5.0.0.update01-623860.x86_64.iso</code>，然后点击 5 ，开始创建U盘安装盘。等待U盘刻录结束。</p>

<p> <img src="http://yanjiuyanjiu-wordpress.stor.sinaapp.com/uploads/2012/04/liliusb_thumb1.png"></p>

<p> 大功告成，是不是很简单？！</p></li>
<li><p>编辑U盘根目录下的BOOT.CFG文件。注意，不要添加 "ks=usb"，因为下面会用交互模式来安装。</p></li>
<li>大功告成</li>
<li>注意，本文主要参考了末尾的参考资料。但是不需要原文的第4步和第5步。因为用普通的 “interactive installation”安装就很方便了。第4步和第5步用于一键自动化安装，适用于大量安装的情况，这里不详细讨论。
见文章末尾的评论，

<blockquote><p>@Cesar: if you do not edit the boot.cfg with the “ks=usb” option and select a interactive installation it will work。</p></blockquote></li>
</ol>


<p><strong>参考资料</strong><br/>
<a href="http://www.ivobeerens.nl/2011/09/17/create-a-bootable-vmware-esxi-5-usb-stick-in-windows-and-perform-a-scripted-installation/">Create a bootable VMware ESXi 5 USB stick in Windows and perform a scripted installation</a></p>
]]></content>
  </entry>
  
</feed>
